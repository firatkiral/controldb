/**
 * quickstart3.js example for controldb (running in web environment)
 *
 * This exmple uses a higher performance, and better scaling ControlDBIndexedAdapter to persist its database.
 * This example uses autosave/autoload 
 */

// include script reference in html (controldb sandbox already has)
// <script src="../../src/controldb.js"></script>
// <script src="../../src/controldb-indexed-adapter.js"></script>
var ia = new ControlDBIndexedAdapter("quickstarts");
var db = new controldb('web-quickstart3.db', {
	adapter: ia,
	autoload: true,
	autoloadCallback : databaseInitialize,
	autosave: true, 
	autosaveInterval: 4000
});

// Now let's implement the autoloadback referenced in controldb constructor
function databaseInitialize() {
  var entries = db.getCollection("entries");
  var messages = db.getCollection("messages");

  // Since our LokiFsStructuredAdapter is partitioned, the default 'quickstart3.db'
  // file will actually contain only the controldb database shell and each of the collections
  // will be saved into independent 'partition' files with numeric suffix.
  
  // Add our main example collection if this is first run.
  // This collection will save into a partition named quickstart3.db.0 (collection 0)  
  if (entries === null) {
    // first time run so add and configure collection with some arbitrary options
    entries = db.addCollection("entries", { indices: ['x'], clone: true });
  }

  // Now let's add a second collection only to prove that this saved partition (quickstart3.db.1) 
  // doesn't need to be saved every time the other partitions do if it never gets any changes
  // which need to be saved.  The first time we run this should be the only time we save it.
  if (messages === null) {
    messages = db.addCollection("messages");
    messages.insert({ txt: "i will only insert into this collection during databaseInitialize" });
  }

  // kick off any program logic or start listening to external events
  runProgramLogic();
}

// While we could have done this in our databaseInitialize function, 
//   lets go ahead and split out the logic to run 'after' initialization into this 'runProgramLogic' function
function runProgramLogic() {
  var entries = db.getCollection("entries");
  var entryCount = entries.count();
  var now = new Date();

  logText("old number of entries in database : " + entryCount);

  entries.insert({ x: now.getTime(), y: 100 - entryCount });
  entryCount = entries.count();

  logText("new number of entries in database : " + entryCount);
  
  logText("");
  logText("Wait 4 seconds for the autosave timer to save our new addition")
  logText("If you waited 4 seconds, the next time you run this script the numbers should increase by 1");
  logText("The four second interval can be adjusted in the call to controldb constructor");
}

logText("wait for database initialization and program logic...");